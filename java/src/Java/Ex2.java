package Java;

//업캐스팅?

class Parent{	// = 슈퍼, 조상, 부모클래스
	public void parentPrn(){
		System.out.println("슈퍼클래스 : parentPrn메소드");
	}
}

class Child extends Parent{	//서브, 자손, 자식클래스
	public void childPrn(){
		System.out.println("서브클래스 : childPrn메소드");
	}
}

public class Ex2 {

	public static void main(String[] args) {
		
		/* 일반 기본 자료형(데이터형태)의 형변환(데이터의 형태를 변환) */
			int a = 10;		//작은 데이터(자료형)
			long b = 20;	//큰 데이터(자료형)
			
			b = (long)a;	//명시적(강제) 형변환
			b = a;			//자동 형변환

		
		
		/* 참조(레퍼런스)자료형의 형변환 */
		
			//자식클래스로부터 객체 생성
			Child c = new Child();
			
			//서브클래스형의 참조변수로 접근해서 호출할 수 있는 메소드 2개
			c.parentPrn();	//부모로부터 상속받은 메소드
			c.childPrn();	//자신의 메소드
			
			
			/*
			 * 1) 업캐스팅 : 부모클래스타입의 참조변수에 자식클래스의 참조변수의 객체의 주소값을 대입할 때..
			 * 					부모클래스형으로 객체를 형변환 시키는 것(업캐스팅)
			 */
			
			//부모클래스형 참조변수 선언
			Parent p;
			
			//부모클래스형 참조변수에 서브클래스의 참조변수의 객체의 주소값을 대입할 때
			//부모클래스형으로 형변환 시키는 것(업캐스팅)
			p = (Parent)c;	//업캐스팅(강제로 형변환)
			p = c;			//업캐스팅(자바컴파일러에 의해 자동형변환 가능!)
			
			//업캐스팅 후에는 부모로부터 상속받은 메소드만 호출할 수 있다.
			//p는 Parent(부모클래스)의 참조변수이므로
			//부모클래스로 상속받은 부분에 대해서만 참조가 가능하다.
			p.parentPrn();
			//p.childPrn();		//참조 불가능
			
		/*
		 * 업캐스팅이란?
		 * 		- 부모클래스형 참조변수에 서브클래스의 참조변수의 객체의 주소값을 대입할 때...
		 * 			부모클래스형으로 형변환 시키는 것(업캐스팅)
		 * 
		 * 		- 업캐스팅 이후 부모클래스형의 참조변수로 자식객체를 참조할 때 참조가능한 영역이 축소된다.
		 * 
		 * 		- 업캐스팅은? 컴파일러에 의해 자동 형변환 된다.
		 * 
		 * 		- 업캐스팅 하겠다라는 것은? 부모로부터 상속받은 부분에 대해서만 참조하고..
		 * 			나머지 일부분에 대해서는 사용을 하지 않겠다고 포기선언한 것이 된다.
		 * 
		 * 		- 요약 : 부모클래스형의 참조변수에 ~ 여러 자식 객체들을 각각 저장할 수 있다 라는 뜻.
		 */
		
	}

}
